import { HardhatRuntimeEnvironment } from "hardhat/types";
import { DeployFunction } from "hardhat-deploy/types";
import { Contract } from "ethers";

/**
 * Deploys TokenA, TokenB, and SimpleDEX contracts using the deployer account.
 * TokenA and TokenB have an initial supply, and SimpleDEX is initialized with their addresses.
 *
 * @param hre HardhatRuntimeEnvironment object.
 */
const deployContracts: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  const { deployer } = await hre.getNamedAccounts();
  const deploy = hre.deployments.deploy; // Acceder a `deploy` directamente desde `hre.deployments`
  const ethers = hre.ethers; // Acceder a `ethers` desde `hre`

  // Deploy TokenA
  const tokenADeployment = await deploy("TokenA", {
    from: deployer,
    args: [ethers.utils.parseEther("1000000")], // Initial supply
    log: true,
    autoMine: true,
  });
  console.log("ðŸš€ TokenA deployed to:", tokenADeployment.address);

  // Deploy TokenB
  const tokenBDeployment = await deploy("TokenB", {
    from: deployer,
    args: [ethers.utils.parseEther("1000000")], // Initial supply
    log: true,
    autoMine: true,
  });
  console.log("ðŸš€ TokenB deployed to:", tokenBDeployment.address);

  // Deploy SimpleDEX
  const simpleDEXDeployment = await deploy("SimpleDEX", {
    from: deployer,
    args: [tokenADeployment.address, tokenBDeployment.address], // Constructor arguments
    log: true,
    autoMine: true,
  });
  console.log("ðŸš€ SimpleDEX deployed to:", simpleDEXDeployment.address);

  // Get the deployed SimpleDEX contract to interact with it after deploying.
  const simpleDEXContract = await ethers.getContract<Contract>("SimpleDEX", deployer);
  console.log("âœ… SimpleDEX contract ready for interactions");
};

export default deployContracts;

// Tags are useful if you have multiple deploy files and only want to run one of them.
// e.g., yarn deploy --tags SimpleDEX
deployContracts.tags = ["SimpleDEX", "TokenA", "TokenB"];
